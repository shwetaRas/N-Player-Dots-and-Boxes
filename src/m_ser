//server
#define MAXBUF 1024
#define MAXVALUE 20
#include<stdio.h>
#include<string.h>    //strlen
#include<stdlib.h>    //strlen
#include<sys/socket.h>
#include<arpa/inet.h> //inet_addr
#include<unistd.h>    //write
#include<pthread.h> //for threading , link with lpthread
 
//the thread function
void *connection_handler(void *);
struct configFile{
   char *key;
   char *value;
};

struct userInfoFile{
    char *username;
    char *password;
    char *friends[MAXVALUE];
};

 
int main(int argc , char *argv[])
{
    struct configFile config_data[MAXVALUE];
    struct userInfoFile user_info_data[MAXVALUE];
    int port;
    int config_length = 0;
    int user_info_length = 0;

    //reading configuration file for server
    FILE * fp ;
    //FILE * fp2;
    //char * line = NULL;
    ssize_t read;
    size_t len = 0;
    char *token;
    char **config;
    const char *delim1 = ":";
    const char *delim2 = "|";
    fp = fopen("/home/seed/Desktop/CPD_Project_2/server/configuration_file.cfg", "r");



    if (fp != NULL)
        { 
            char line[MAXBUF];
            int i = 0;
            int j = 0;
            while(fgets(line, sizeof(line), fp) != NULL)
            {
                j=0;         
                token = strtok(line, delim1);

                //config_data = realloc(config_data, i+1 * sizeof *config_data);
                while(token != NULL)
                {
                    
                    if(j == 0)
                    {
            config_data[i].key = (char *)malloc(sizeof(char) * (strlen(token)+1));
            strcpy(config_data[i].key, token);
                        //config_data[i].key = token;
                        //printf("%s\n", config_data[i].key);
                    }
                    else
                    {
            config_data[i].value = (char *)malloc(sizeof(char) * (strlen(token)+1));
            strcpy(config_data[i].value, token);
                        //config_data[i].value = token;
                        //printf("%s\n", config_data[i].value);
                    }

                    token = strtok(NULL, delim1);
                    j++;
                }
                i++;
            }
        config_length = i;
            }
    fclose(fp);

    fp = fopen("/home/seed/Desktop/CPD_Project_2/server/user_info_file.cfg", "r");
    if (fp != NULL)
        {                 
            char line[MAXBUF];
            int i = 0;
            int j = 0;

            while(fgets(line, sizeof(line), fp) != NULL)
            {
                j = 0;       
                token = strtok(line, delim2);
                while(token != NULL)
                {
                    
                    if(j == 0)
                    {
            user_info_data[i].username = (char *)malloc(sizeof(char) * (strlen(token)+1));
                        strcpy(user_info_data[i].username, token);
                        //printf("%s\n", user_info_data[i].username);

                    }
                    else if(j == 1)
                    {
            user_info_data[i].password = (char *)malloc(sizeof(char) * (strlen(token)+1));
                        strcpy(user_info_data[i].password, token);
                        //user_info_data[i].password = token;
                        //printf("%s\n", user_info_data[i].password);
                    }
                    else
                    {

                        const char *temp_delim = ";";
                        char * temp_token;
                        int k = 0;
                        temp_token = strtok(token, temp_delim);

                        while(temp_token != NULL)
                        {                   
                user_info_data[i].friends[k] = (char *)malloc(sizeof(char) * (strlen(temp_token)+1));
                            strcpy(user_info_data[i].friends[k],temp_token);         
                            //user_info_data[i].friends[k] = temp_token;
                            //printf("%s\n", user_info_data[i].friends[k]);
                            temp_token = strtok(NULL, temp_delim);
                            k++;
                        }
                    }
                    
                    token = strtok(NULL, delim2);
                    j++;
                }
                i++;
            }
        user_info_length = i;
        }
    fclose(fp);

    int i;
    
    

    for(i=0 ; i<config_length; i++)
    {    
        if(strcmp(config_data[i].key,"port") == 0)
        {
     port = atoi(config_data[i].value);
        }
    }

    
 
    while(port == 0)
    {
    printf("Created port : %d\n", port);
        printf("Please enter an unused port number for user :");
    scanf("%d", &port);
    }

    
    
    int socket_desc , client_sock , c;
    struct sockaddr_in server , client;
     
    //Create socket
    socket_desc = socket(AF_INET , SOCK_STREAM , 0);
    if (socket_desc == -1)
    {
        printf("Could not create socket");
    }
    puts("Socket created");
     
    //Prepare the sockaddr_in structure
    server.sin_family = AF_INET;
    server.sin_addr.s_addr = INADDR_ANY;
    server.sin_port = htons( port );
     
    //Bind
    if( bind(socket_desc,(struct sockaddr *)&server , sizeof(server)) < 0)
    {
        //print the error message
        perror("bind failed. Error");
        return 1;
    }
    puts("binding done");
     
    //Listen
    listen(socket_desc , 3);

    

    printf("Domain Name : Localhost\n");
    printf("Port Number : %d\n", port);

    
    for(i = 0; i< user_info_length; i++)
    {
    
    printf("%s\n", user_info_data[i].username);
    
    printf("%s\n", user_info_data[i].password);
    
    
    int j;
    for (j = 0; user_info_data[i].friends[j] != NULL; j++)
    {
        printf("%s\n", user_info_data[i].friends[j]);
    }
    
    }


     
    //Accept and incoming connection
    puts("Waiting for incoming connections...");
    c = sizeof(struct sockaddr_in);
        
    pthread_t thread_id;
    
    while( (client_sock = accept(socket_desc, (struct sockaddr *)&client, (socklen_t*)&c)) )
    {
        puts("Connection accepted");
         
        if( pthread_create( &thread_id , NULL ,  connection_handler , (void*) &client_sock) > 0)
        {
            perror("could not create thread");
            return 1;
        }
         
        //Now join the thread , so that we dont terminate before the thread
        //pthread_join( thread_id , NULL);
        puts("Handler assigned");
    }
     
    if (client_sock < 0)
    {
        perror("accept failed");
        return 1;
    }

    close(socket_desc);
     
    return 0;
}
 
/*
 * This will handle connection for each client
 * */
void *connection_handler(void *socket_desc)
{
    //Get the socket descriptor
    int sock = *(int*)socket_desc;
    int read_size;
    char *message , client_message[2000];
    int command;
     
    //Send some messages to the client
    message = "What would you like to do?\nr - register with the server\n l - log into the server\n exit - exit the client program\n";
    write(sock , message , strlen(message));

  /*  if(command = recv(sock , client_message , 2000 , 0) <= 0)
	{
	printf("Error");
	}

   while(((command = recv(sock , client_message , 2000 , 0)) > 0))
    {
         message = "What would you like to do?\nr - register with the server\n l - log into the server\n exit - exit the client program\n";
         write(sock , message , strlen(message));
    }

    client_message[read_size] = '\0';
    printf("%s", client_message);
    memset(client_message, 0, 2000);*/

    


     
    // message = "Now type something and i shall repeat what you type \n";
    // write(sock , message , strlen(message));
     
    //Receive a message from client
   /* while( (read_size = recv(sock , client_message , 2000 , 0)) > 0 )
    {
        //end of string marker
        client_message[read_size] = '\0';
        
        //Send the message back to client
        write(sock , client_message , strlen(client_message));


        
        //clear the message buffer
        memset(client_message, 0, 2000);
    }
     
    if(read_size == 0)
    {
        puts("Client disconnected");
        fflush(stdout);
    }
    else if(read_size == -1)
    {
        perror("recv failed###");
    }*/
         
    return 0;
} 